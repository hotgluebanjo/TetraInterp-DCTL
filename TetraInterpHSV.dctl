// MIT License

// Copyright (c) 2021 calvinsilly, Ember Light, Nick Eason

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/hotgluebanjo

DEFINE_UI_PARAMS(BLK_RGB, Black, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)
DEFINE_UI_PARAMS(WHT_RGB, White, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)

DEFINE_UI_PARAMS(RED_R, Red Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(RED_G, Red Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(RED_B, Red Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(GRN_R, Green Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(GRN_G, Green Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(GRN_B, Green Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(BLU_R, Blue Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(BLU_G, Blue Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(BLU_B, Blue Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(CYN_R, Cyan Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(CYN_G, Cyan Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(CYN_B, Cyan Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(MAG_R, Magenta Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(MAG_G, Magenta Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(MAG_B, Magenta Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(YEL_R, Yellow Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(YEL_G, Yellow Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(YEL_B, Yellow Value, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb;

    float red_hue = RED_B + 1.0f;
    float red_sat = RED_B - RED_G;
    float red_val = RED_B + RED_R - RED_G;

    float grn_hue = GRN_B - GRN_G;
    float grn_sat = GRN_B + 1.0f;
    float grn_val = GRN_B + GRN_R - GRN_G;

    float blu_hue = BLU_B + BLU_R - BLU_G;
    float blu_sat = BLU_B - BLU_G;
    float blu_val = BLU_B + 1.0f;

    float cyn_hue = CYN_B - CYN_G;
    float cyn_sat = CYN_B + 1.0f + CYN_R;
    float cyn_val = CYN_B + 1.0f;

    float mag_hue = MAG_B + 1.0f;
    float mag_sat = MAG_B - MAG_G;
    float mag_val = MAG_B + 1.0f + MAG_R;

    float yel_hue = YEL_B + 1.0f + YEL_R;
    float yel_sat = YEL_B + 1.0f;
    float yel_val = YEL_B - YEL_G;

    float3 blk = make_float3(BLK_RGB, BLK_RGB, BLK_RGB);
    float3 wht = make_float3(WHT_RGB, WHT_RGB, WHT_RGB);
    float3 red = make_float3(red_hue, red_sat, red_val);
    float3 grn = make_float3(grn_hue, grn_sat, grn_val);
    float3 blu = make_float3(blu_hue, blu_sat, blu_val);
    float3 cyn = make_float3(cyn_hue, cyn_sat, cyn_val);
    float3 mag = make_float3(mag_hue, mag_sat, mag_val);
    float3 yel = make_float3(yel_hue, yel_sat, yel_val);

    if (p_R > p_G) {
        if (p_G > p_B) {
            rgb = p_R * (red - blk) + blk + p_G * (yel - red) + p_B * (wht - yel);
        } else if (p_R > p_B) {
            rgb = p_R * (red - blk) + blk + p_G * (wht - mag) + p_B * (mag - red);
        } else {
            rgb = p_R * (mag - blu) + p_G * (wht - mag) + p_B * (blu - blk) + blk;
        }
    } else {
        if (p_B > p_G) {
            rgb = p_R * (wht - cyn) + p_G * (cyn - blu) + p_B * (blu - blk) + blk;
        } else if (p_B > p_R) {
            rgb = p_R * (wht - cyn) + p_G * (grn - blk) + blk + p_B * (cyn - grn);
        } else {
            rgb = p_R * (yel - grn) + p_G * (grn - blk) + blk + p_B * (wht - yel);
        }
    }

    return rgb;
}
