// MIT License

// Copyright (c) 2021 calvinsilly, Ember Light, Nick Eason

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/hotgluebanjo

DEFINE_UI_PARAMS(BLK_RGB, Black, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)
DEFINE_UI_PARAMS(WHT_RGB, White, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)

DEFINE_UI_PARAMS(RED_HUE, Red Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(RED_SAT, Red Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(RED_VAL, Red Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(GRN_HUE, Green Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(GRN_SAT, Green Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(GRN_VAL, Green Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(BLU_HUE, Blue Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(BLU_SAT, Blue Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(BLU_VAL, Blue Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(CYN_HUE, Cyan Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(CYN_SAT, Cyan Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(CYN_VAL, Cyan Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(MAG_HUE, Magenta Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(MAG_SAT, Magenta Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(MAG_VAL, Magenta Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

DEFINE_UI_PARAMS(YEL_HUE, Yellow Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(YEL_SAT, Yellow Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(YEL_VAL, Yellow Value, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb;

    float red_r = RED_VAL + 1.0f;
    float red_g = RED_VAL - RED_SAT;
    float red_b = RED_VAL + RED_HUE - RED_SAT;

    float grn_r = GRN_VAL - GRN_SAT;
    float grn_g = GRN_VAL + 1.0f;
    float grn_b = GRN_VAL + GRN_HUE - GRN_SAT;

    float blu_r = BLU_VAL + BLU_HUE - BLU_SAT;
    float blu_g = BLU_VAL - BLU_SAT;
    float blu_b = BLU_VAL + 1.0f;

    float cyn_r = CYN_VAL - CYN_SAT;
    float cyn_g = CYN_VAL + 1.0f + CYN_HUE;
    float cyn_b = CYN_VAL + 1.0f;

    float mag_r = MAG_VAL + 1.0f;
    float mag_g = MAG_VAL - MAG_SAT;
    float mag_b = MAG_VAL + 1.0f + MAG_HUE;

    float yel_r = YEL_VAL + 1.0f + YEL_HUE;
    float yel_g = YEL_VAL + 1.0f;
    float yel_b = YEL_VAL - YEL_SAT;

    float3 blk = make_float3(BLK_RGB, BLK_RGB, BLK_RGB);
    float3 wht = make_float3(WHT_RGB, WHT_RGB, WHT_RGB);
    float3 red = make_float3(red_r, red_g, red_b);
    float3 grn = make_float3(grn_r, grn_g, grn_b);
    float3 blu = make_float3(blu_r, blu_g, blu_b);
    float3 cyn = make_float3(cyn_r, cyn_g, cyn_b);
    float3 mag = make_float3(mag_r, mag_g, mag_b);
    float3 yel = make_float3(yel_r, yel_g, yel_b);

    if (p_R > p_G) {
        if (p_G > p_B) {
            rgb = p_R * (red - blk) + blk + p_G * (yel - red) + p_B * (wht - yel);
        } else if (p_R > p_B) {
            rgb = p_R * (red - blk) + blk + p_G * (wht - mag) + p_B * (mag - red);
        } else {
            rgb = p_R * (mag - blu) + p_G * (wht - mag) + p_B * (blu - blk) + blk;
        }
    } else {
        if (p_B > p_G) {
            rgb = p_R * (wht - cyn) + p_G * (cyn - blu) + p_B * (blu - blk) + blk;
        } else if (p_B > p_R) {
            rgb = p_R * (wht - cyn) + p_G * (grn - blk) + blk + p_B * (cyn - grn);
        } else {
            rgb = p_R * (yel - grn) + p_G * (grn - blk) + blk + p_B * (wht - yel);
        }
    }

    return rgb;
}
