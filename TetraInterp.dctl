// MIT License

// Copyright (c) 2021 calvinsilly, Ember Light, Nick Eason

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/hotgluebanjo


// TetraInterp v001 Feb 26, 2018 by Steve Yedlin
// with help from Eric Cameron and Richard Goedeken
 
// Tetrahedral interpolation is invertible IF the
// cube corners are not turned inside out.
// For example, as long as cyan is not greener than green.

DEFINE_UI_PARAMS(RED_R, Red Red, DCTLUI_SLIDER_FLOAT, 1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(RED_G, Red Green, DCTLUI_SLIDER_FLOAT, 0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(RED_B, Red Blue, DCTLUI_SLIDER_FLOAT, 0.0, -2.0, 2.0, 0.001)

DEFINE_UI_PARAMS(GRN_R, Green Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(GRN_G, Green Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(GRN_B, Green Blue, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)

DEFINE_UI_PARAMS(BLU_R, Blue Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(BLU_G, Blue Green, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(BLU_B, Blue Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

DEFINE_UI_PARAMS(CYN_R, Cyan Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(CYN_G, Cyan Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(CYN_B, Cyan Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

DEFINE_UI_PARAMS(MAG_R, Magenta Red, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(MAG_G, Magenta Green, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(MAG_B, Magenta Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

DEFINE_UI_PARAMS(YEL_R, Yellow Red, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(YEL_G, Yellow Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(YEL_B, Yellow Blue, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)

DEFINE_UI_PARAMS(INVERT, Invert, DCTLUI_CHECK_BOX, 0)

__CONSTANT__ float PI_LOCAL = 3.141592653589f;

// Dennis, please explain yourself.
typedef float float3x3[3][3];

__DEVICE__ inline void float3x3_from_float3(float3x3 output, float3 r0, float3 r1, float3 r2) {
    output[0][0] = r0.x;
    output[0][1] = r0.y;
    output[0][2] = r0.z;
    output[1][0] = r1.x;
    output[1][1] = r1.y;
    output[1][2] = r1.z;
    output[2][0] = r2.x;
    output[2][1] = r2.y;
    output[2][2] = r2.z;
}

__DEVICE__ float determinant_minor(int row_height, int column_width, float3x3 matrix) {
    int y1 = row_height == 0 ? 1 : 0;
    int y2 = row_height == 2 ? 1 : 2;

    int x1 = column_width == 0 ? 1 : 0;
    int x2 = column_width == 2 ? 1 : 2;

    return (matrix[y1][x1] * matrix[y2][x2]) - (matrix[y1][x2] * matrix[y2][x1]);
}

__DEVICE__ inline float determinant(float3x3 matrix) {
    return (matrix[0][0] * determinant_minor(0, 0, matrix))
        - (matrix[0][1] * determinant_minor(0, 1, matrix))
        + (matrix[0][2] * determinant_minor(0, 2, matrix));
}

__DEVICE__ void matrix_inverse(float3x3 matrix, float3x3 result) {
    float det = determinant(matrix);

    for (int y = 0; y < 3; y++) {
        for (int x = 0; x < 3; x++) {
            result[y][x] = determinant_minor(x, y, matrix) * (1.0f / det);
            if (1 == ((x+y) % 2))
                result[y][x] = -result[y][x];
        }
    }
}

// A function that returns the rotational distance of a point (around the gray diagonal) from red
__DEVICE__ float pt_ang(float3 triplet, float3 corners[6]) {
    float3 rc0 = corners[0]; // red corner is the first in the array
    float3 tr0 = triplet;
    float eps = 1e-6f; // small nudge to avoid what seems to be precision errors

    // missing rotation
    float a_ang = PI_LOCAL / 4.0f;
    float3 tr1;
    tr1.x = tr0.x;
    tr1.y = tr0.y * _cosf(a_ang) + tr0.z * _sinf(a_ang);
    tr1.z = tr0.y * (-_sinf(a_ang)) + tr0.z * _cosf(a_ang);
    float3 rc1;
    rc1.x = rc0.x;
    rc1.y = rc0.y * _cosf(a_ang) + rc0.z * _sinf(a_ang);
    rc1.z = rc0.y * (-_sinf(a_ang)) + rc0.z * _cosf(a_ang);

    // rotate so that gray diagonal is vertical  
    float b_ang = _atan2f(_sqrtf(2.0f), 1.0f) - PI_LOCAL / 2.0f;
    float3 tr2;
    tr2.x = tr1.x * _cosf(b_ang) + tr1.y * _sinf(b_ang);
    tr2.y = tr1.x * (-_sinf(b_ang)) + tr1.y * _cosf(b_ang);
    tr2.z = tr1.z;
    float3 rc2;
    rc2.x = rc1.x * _cosf(b_ang) + rc1.y * _sinf(b_ang);
    rc2.y = rc1.x * (-_sinf(b_ang)) + rc1.y * _cosf(b_ang);
    rc2.z = rc1.z;

    // now rotate on the now-vertical gray axis so that red is at -pi rotation angle
    float g_ang = atan2(rc2.x, rc2.z) - PI_LOCAL;
    float3 tr3;
    tr3.x = tr2.x * _cosf(g_ang) + tr2.z * (-_sinf(g_ang));
    tr3.y = tr2.y;
    tr3.z = tr2.x * _sinf(g_ang) + tr2.z * _cosf(g_ang);
    
    return _atan2f(tr3.x - eps, tr3.z); // here's where epsilon is used
}

// A function that finds which of the 6 tetrahedrons a point is contained in,
// even if the cube has been deformed
__DEVICE__ int tetra_region(float3 rgb, float3 corners[6]) {
    float ang = pt_ang(rgb, corners);
    float corner_angs[6];

    for (int i = 0; i < 6; i++) {
        corner_angs[i] = pt_ang(corners[i] , corners);
    }

    int region = 5;
    for (int i = 0; i < 5; i++) {
        if (corner_angs[i] <= ang && ang < corner_angs[i+1]) {
            region = i;
            break;
        }
    }

    return region;
}

__DEVICE__ float3 tetra(float3 triplet, float3 corners[6]) {
    float r = triplet.x;
    float g = triplet.y;
    float b = triplet.z;

    float3 wht = make_float3(1.0f, 1.0f, 1.0f);
    float3 red = corners[0];
    float3 yel = corners[1];
    float3 grn = corners[2];
    float3 cyn = corners[3];
    float3 blu = corners[4];
    float3 mag = corners[5];

    if (r > g) {
        if (g > b) {
            // r>g>b
            return r*red + g*(yel-red) + b*(wht-yel);
        } else if (r > b) {
            // r>b>g
            return r*red + g*(wht-mag) + b*(mag-red);
        } else {
            // b>r>g
            return r*(mag-blu) + g*(wht-mag) + b*blu;
        }
    } else {
        if (b > g) {
            // b>g>r
            return r*(wht-cyn) + g*(cyn-blu) + b*blu;
        } else if (b > r) {
            // g>b>r
            return r*(wht-cyn) + g*grn + b*(cyn-grn);
        } else {
            // g>r>b
            return r*(yel-grn) + g*grn + b*(wht-yel);
        }
    }
}

__DEVICE__ float3 inv_tetra(float3 triplet, float3 corners[6]) {
    float r = triplet.x;
    float g = triplet.y;
    float b = triplet.z;

    float3 wht = make_float3(1.0f, 1.0f, 1.0f);
    float3 red = corners[0];
    float3 yel = corners[1];
    float3 grn = corners[2];
    float3 cyn = corners[3];
    float3 blu = corners[4];
    float3 mag = corners[5];

    int region = tetra_region(triplet, corners);

    float3 c_r;
    float3 c_g;
    float3 c_b;

    switch (region) {
    case 0:
        // r>g>b 
        c_r = red;
        c_g = yel-red;
        c_b = wht-yel;
        break;
    case 1:
        // g>r>b
        c_r = yel-grn;
        c_g = grn;
        c_b = wht-yel;
        break;
    case 2:
        // g>b>r
        c_r = wht-cyn;
        c_g = grn;
        c_b = cyn-grn;
        break;
    case 3:
        // b>g>r 
        c_r = wht-cyn;
        c_g = cyn-blu;
        c_b = blu;
        break;
    case 4:
        // b>r>g
        c_r = mag-blu;
        c_g = wht-mag;
        c_b = blu;
        break;
    default:
        // r>g>b
        c_r = red;
        c_g = wht-mag;
        c_b = mag-red;
    }

    float3x3 matrix;
    float3x3_from_float3(matrix, c_r, c_g, c_b);

    float3x3 inverse;
    matrix_inverse(matrix, inverse);

    c_r = make_float3(inverse[0][0], inverse[0][1], inverse[0][2]);
    c_g = make_float3(inverse[1][0], inverse[1][1], inverse[1][2]);
    c_b = make_float3(inverse[2][0], inverse[2][1], inverse[2][2]);

    return (r * c_r + g * c_g + b * c_b);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(p_R, p_G, p_B);
    float3 corners[6];
 
    corners[0] = make_float3(RED_R, RED_G, RED_B);
    corners[1] = make_float3(YEL_R, YEL_G, YEL_B);
    corners[2] = make_float3(GRN_R, GRN_G, GRN_B);
    corners[3] = make_float3(CYN_R, CYN_G, CYN_B);
    corners[4] = make_float3(BLU_R, BLU_G, BLU_B);
    corners[5] = make_float3(MAG_R, MAG_G, MAG_B);

    float3 output;

    if (INVERT) {
        output = inv_tetra(rgb, corners);
    } else {
        output = tetra(rgb, corners);
    }

    return output;
}
